(* 
                         CS 51 Final Project
                         MiniML -- Evaluation
                             Spring 2018
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)
    
open Expr ;;
  
(* Exception for evaluator runtime, generated by a runtime error *)
exception EvalError of string ;;
(* Exception for evaluator runtime, generated by an explicit "raise" 
construct *)
exception EvalException ;;


(*......................................................................
  Environments and values 
 *)

module type Env_type = sig
    type env 
    type value =
      | Val of expr
      | Closure of (expr * env)
    val create : unit -> env
    val close : expr -> env -> value
    val lookup : env -> varid -> value
    val extend : env -> varid -> value ref -> env
    val env_to_string : env -> string
    val value_to_string : ?printenvp:bool -> value -> string
  end

module Env : Env_type =
  struct
     type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env) 

    (* Creates an empty environment *)
    let create () : env = [] ;;

    (* Creates a closure from an expression and the environment it's
       defined in *)
    let close (exp : expr) (env : env) : value =
      Closure (exp, env) ;;

    (* Looks up the value of a variable in the environment *)
    let lookup (env : env) (varname : varid) : value =
      try !(List.assoc varname env) with 
      | Not_found -> raise (EvalError "Unbound variable") ;;

    (* Returns a new environment just like env except that it maps the
       variable varid to loc *)
    let extend (env : env) (varname : varid) (loc : value ref) : env =
      (varname, loc) :: List.remove_assoc varname env ;;

    (* Returns a printable string representation of an environment *)
    let rec env_to_string (env : env) : string =
      List.fold_left (fun a (x, y) -> 
        a ^ "(" ^ x ^ ", " ^ value_to_string !y ^ "), ") "" env 

    (* Returns a printable string representation of a value; the flag
       printenvp determines whether to include the environment in the
       string representation when called on a closure *)
    and value_to_string ?(printenvp : bool = true) (v : value) : string =
      match v with 
      | Val e -> exp_to_concrete_string e
      | Closure (ex, en) -> if printenvp then 
                              "Closure: (" ^ exp_to_concrete_string ex ^ 
                              ", " ^ env_to_string en ^ ")"
                            else exp_to_concrete_string ex ;;
  end
;;


(*......................................................................
  Evaluation functions

  Returns a result of type value of evaluating the expression exp
  in the environment env. We've provided an initial implementation
  for a trivial evaluator, which just converts the expression
  unchanged to a value and returns it, along with "stub code" for
  three more evaluators: a substitution model evaluator and dynamic
  and lexical environment model versions.

  Each evaluator is of type expr -> Env.env -> Env.value for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures). *)

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)
open Env 

let eval_t (exp : expr) (_env : Env.env) : Env.value =
  (* coerce the expr, unchanged, into a value *)
  Val exp ;;

let evalunop (u : unop) (e : expr) : expr = 
  match u, e with 
  | Negate, Num x -> Num (~-x)
  | Negatef, Float x -> Float (~-.x)
  | Not, Bool x -> Bool (not x)
  | _, _ -> raise (EvalError "Invalid Unop") ;;

let evalbinop (b : binop) (e1 : expr) (e2 : expr) : expr = 
  match b, e1, e2 with 
  | Exponent, Float x, Float y -> Float (x ** y)
  | Plus, Num x, Num y -> Num (x + y)
  | Minus, Num x, Num y -> Num (x - y)
  | Times, Num x, Num y -> Num (x * y)
  | Divide, Num x, Num y -> Num (x / y)
  | Plusf, Float x, Float y -> Float (x +. y)
  | Minusf, Float x, Float y -> Float (x -. y)
  | Timesf, Float x, Float y -> Float (x *. y)
  | Dividef, Float x, Float y -> Float (x /. y)
  | Equals, Num x, Num y -> Bool (x = y)
  | NotEquals, Num x, Num y -> Bool (x <> y)
  | LessThan, Num x, Num y -> Bool (x < y)
  | GreaterThan, Num x, Num y -> Bool (x > y)
  | LessEquals, Num x, Num y -> Bool (x <= y)
  | GreaterEquals, Num x, Num y -> Bool (x >= y)
  | Equals, Bool x, Bool y -> Bool (x && y)
  | NotEquals, Bool x, Bool y -> Bool (x <> y)
  | And, Bool x, Bool y -> Bool (x && y)
  | Or, Bool x, Bool y -> Bool (x || y)
  | _, _, _ -> raise (EvalError "Invalid Binop") ;;

(* The SUBSTITUTION MODEL evaluator -- to be completed *)

let eval_s (exp : expr) (_env : Env.env) : Env.value =
  let rec eval (exp : expr) : expr =
  match exp with 
  | Var _ -> raise (EvalError "Unbound variable")
  | Num _ | Float _ | Bool _ | Raise | Unassigned | Fun (_, _)  -> exp
  | Unop (u, e) -> evalunop u (eval e)
  | Binop (u, e1, e2) -> evalbinop u (eval e1) (eval e2)
  | Conditional (e1, e2, e3) -> (match eval e1 with 
                                | Bool b -> if b then eval e2 else eval e3 
                                | _ -> raise (EvalError "Invalid Conditional"))
  | Let (v, e1, e2) -> eval (subst v (eval e1) e2)
  | Letrec (v, e1, e2) -> eval (subst v (eval (subst v 
                          (Letrec (v, e1, Var v)) e1)) e2)
  | App (e1, e2) -> (match eval e1 with 
                    | Fun (v, e) -> eval (subst v (eval e2) e)
                    | _ -> raise (EvalError "Invalid App"))
  in 
  Val (eval exp) ;;
     
let eval_all (exp : expr) (env : Env.env) (isdynam : bool) : Env.value = 
  let rec eval (exp : expr) (env : Env.env) : Env.value =
  match exp with 
  | Var v -> lookup env v 
  | Num _ | Float _ | Bool _ | Raise | Unassigned -> Val exp
  | Unop (u, e) -> (match eval e env with 
                    | Val e -> Val (evalunop u e)
                    | _ -> raise (EvalError "Invalid Unop"))
  | Binop (u, e1, e2) -> (match eval e1 env, eval e2 env with 
                          | Val e1, Val e2 -> Val (evalbinop u e1 e2) 
                          | _, _ -> raise (EvalError "Invalid Binop"))
  | Conditional (e1, e2, e3) -> (match eval e1 env with 
                                | Val (Bool b) -> if b then eval e2 env 
                                                  else eval e3 env 
                                | _ -> raise (EvalError "Invalid Conditional"))
  | Fun _ -> if isdynam then Val exp else close exp env
  | Let (v, e1, e2) -> eval (App (Fun (v, e2), e1)) env
  | Letrec (v, e1, e2) -> let value = ref (Val Unassigned) in
                          let env' = extend env v value in
                          let value' = ref (eval e1 env') in
                          (value := !value'; eval e2 (extend env v value))
  | App (e1, e2) -> 
      match eval e1 env with 
      | Val (Fun (v, e)) -> 
        if isdynam then eval e (extend env v (ref (eval e2 env)))
        else raise EvalException
      | Closure (Fun (v, e), en) -> 
        if not isdynam then eval e (extend en v (ref (eval e2 env)))
        else raise EvalException
      | _ -> raise (EvalError "Cannot apply non functions")

  in 
  eval exp env ;;

(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator -- to be
   completed *)

let eval_d (exp : expr) (env : Env.env) : Env.value = 
  eval_all exp env true ;;
     
       
(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator -- optionally
   completed as (part of) your extension *)
   
let eval_l (exp : expr) (env : Env.env) : Env.value = 
  eval_all exp env false ;;

(* Connecting the evaluators to the external world. The REPL in
   miniml.ml uses a call to the single function evaluate defined
   here. Initially, evaluate is the trivial evaluator eval_t. But you
   can define it to use any of the other evaluators as you proceed to
   implement them. (We will directly unit test the four evaluators
   above, not the evaluate function, so it doesn't matter how it's set
   when you submit your solution.) *)
   
let evaluate = eval_l ;;
